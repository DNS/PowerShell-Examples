
function MyFunc([string] $arg1, [string] $arg2) {
	# Instructions
}

MyFunc value1 value2
MyFunc -arg1 value1 -arg2 value2


#####################################


function MyFunc() {
	param( [string] $arg1, [string] $arg2 )
	# Instructions
}

MyFunc value1 value2
MyFunc -arg1 value1 -arg2 value2

#####################################

function Verb-Noun
{
  param (
    # Definition of static parameters
  )
  dynamicparam {
    # Definition of dynamic parameters
  }
  begin {
    # Set of instruction to run at the start of the pipeline
  }
  process {
    # Main instruction sets, ran for each item in the pipeline
  }
  end {
    # Set of instruction to run at the end of the pipeline
  }
}


Verb-Noun -Param1 value1 -Param2 value2



#####################################

function hello ($name) {
	'Your name is ' + $name
}

hello 'Obito Uchiha'


function func_variable_length ($array) {
	foreach ($i in $array) { $i }
}

func_variable_length 1, 2, 3
func_variable_length @(1, 2, 3)

##################################### 


# Function with mandatory argument
function TestFunc {
	Param(
		[Parameter(Mandatory)] $a = 'empty argument $a', 
		$b = 'empty argument $b'
	)

	Write-Output "$a $b"
}


#####################################

# stdout can cause function to return it's value
function test {
	Write-Output 'abc'
	return $true
}
test

# to avoid use Write-Host or Out-Null or > $null
function test {
	Write-Host 'abc'
	Write-Output 'abc' | Out-Null
	Write-Output 'abc' > $null
	return $true
}
test



